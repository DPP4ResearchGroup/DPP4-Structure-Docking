#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals
from grako.parsing import graken, Parser


__version__ = (2015, 8, 9, 21, 35, 32, 6)

__all__ = [
    'tbl_grammarParser',
    'tbl_grammarSemantics',
    'main'
]


class tbl_grammarParser(Parser):
    def __init__(self, whitespace=None, nameguard=None, **kwargs):
        super(tbl_grammarParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=None,
            eol_comments_re='\\!.*?$',
            ignorecase=True,
            **kwargs
        )

    @graken()
    def _NUMBER_(self):
        self._pattern(r'([0-9])')

    @graken()
    def _INTEGER_(self):
        self._pattern(r'([1-9][0-9]*|0+)')

    @graken()
    def _float_(self):
        self._pattern(r'([+-]?[0-9]*\.[0-9]+|[0-9]+\.)')

    @graken()
    def _expfloat_(self):
        self._pattern(r'([0-9]+\.?|[0-9]*\.)[eE][+-]?[0-9]+')

    @graken()
    def _real_(self):
        with self._choice():
            with self._option():
                self._float_()
            with self._option():
                self._expfloat_()
            with self._option():
                self._INTEGER_()
            self._error('no available options')

    @graken()
    def _SEGID_(self):
        self._pattern(r'[^\s()]{,4}')

    @graken()
    def _RESID_(self):
        self._pattern(r'[^\s()]{1,4}')

    @graken()
    def _RESNAME_(self):
        self._pattern(r'[^\s()]{1,4}')

    @graken()
    def _TYPE_(self):
        self._pattern(r'[^\s()]{1,4}')

    @graken()
    def _WILDCARD_(self):

        def block0():
            with self._choice():
                with self._option():
                    self._token('*')
                with self._option():
                    self._token('%')
                with self._option():
                    self._token('#')
                with self._option():
                    self._token('+')
                self._error('expecting one of: # % * +')
        self._closure(block0)

    @graken()
    def _XYZ_(self):

        def block0():
            with self._choice():
                with self._option():
                    self._token('x')
                with self._option():
                    self._token('y')
                with self._option():
                    self._token('z')
                with self._option():
                    self._token('xy')
                with self._option():
                    self._token('xz')
                with self._option():
                    self._token('yz')
                with self._option():
                    self._token('xyz')
                self._error('expecting one of: x xy xyz xz y yz z')
        self._closure(block0)

    @graken()
    def _vector_(self):
        with self._choice():
            with self._option():
                with self._group():
                    self._real_()
                    self.ast['x'] = self.last_node
                    with self._optional():
                        self._token(',')
                    self._real_()
                    self.ast['y'] = self.last_node
                    with self._optional():
                        self._token(',')
                    self._real_()
                    self.ast['z'] = self.last_node
            with self._option():
                with self._group():
                    self._token('tail')
                    self._token('=')
                    self._atom_selection_()
                    self.ast['tail'] = self.last_node
                    with self._optional():
                        self._token(',')
                    self._token('head')
                    self._token('=')
                    self._atom_selection_()
                    self.ast['head'] = self.last_node
            self._error('no available options')

        self.ast._define(
            ['x', 'y', 'z', 'tail', 'head'],
            []
        )

    @graken()
    def _atom_selection_(self):
        with self._choice():
            with self._option():
                with self._group():
                    self._token('(')
                    self._atom_selection2_()
                    self.ast['@'] = self.last_node
                    self._token(')')
            with self._option():
                self._atom_selection2_()
            self._error('no available options')

    @graken()
    def _atom_selection2_(self):
        self._term_()
        self.ast['term'] = self.last_node

        def block1():
            self._token('or')
            self._term_()
            self.ast['or_'] = self.last_node
        self._closure(block1)

        self.ast._define(
            ['term', 'or_'],
            []
        )

    @graken()
    def _term_(self):
        with self._choice():
            with self._option():
                with self._group():
                    self._token('(')
                    self._term2_()
                    self.ast['@'] = self.last_node
                    self._token(')')
            with self._option():
                self._term2_()
            self._error('no available options')

    @graken()
    def _term2_(self):
        self._factor_()
        self.ast['factor'] = self.last_node

        def block1():
            self._token('and')
            self._factor_()
            self.ast['and_'] = self.last_node
        self._closure(block1)

        self.ast._define(
            ['factor', 'and_'],
            []
        )

    @graken()
    def _factor_(self):
        with self._choice():
            with self._option():
                with self._group():
                    self._token('(')
                    self._factor0_()
                    self.ast['@'] = self.last_node
                    self._token(')')
            with self._option():
                self._factor0_()
            self._error('no available options')

    @graken()
    def _factor0_(self):
        with self._choice():
            with self._option():
                self._not_()
            with self._option():
                self._byres_()
            with self._option():
                self._bygroup_()
            with self._option():
                self._bondedto_()
            with self._option():
                self._segid_()
            with self._option():
                self._resid_()
            with self._option():
                self._resname_()
            with self._option():
                self._name_()
            with self._option():
                self._chemical_()
            with self._option():
                self._atom_()
            with self._option():
                self._attribute_()
            with self._option():
                self._fbox_()
            with self._option():
                self._sfbox_()
            with self._option():
                self._point_()
            with self._option():
                self._RECALL_STORE_()
            with self._option():
                self._known_()
            with self._option():
                self._hydrogen_()
            with self._option():
                self._all__()
            with self._option():
                self._previous_()
            with self._option():
                self._tag_()
            with self._option():
                self._none_()
            with self._option():
                self._id_()
            with self._option():
                self._around_()
            with self._option():
                self._saround_()
            self._error('no available options')

    @graken()
    def _not_(self):
        self._token('not')
        self._atom_selection_()
        self.ast['not_'] = self.last_node

        self.ast._define(
            ['not_'],
            []
        )

    @graken()
    def _byres_(self):
        self._token('byres')
        self._atom_selection_()
        self.ast['byres'] = self.last_node

        self.ast._define(
            ['byres'],
            []
        )

    @graken()
    def _bygroup_(self):
        self._token('bygroup')
        self._atom_selection_()
        self.ast['bygroup'] = self.last_node

        self.ast._define(
            ['bygroup'],
            []
        )

    @graken()
    def _bondedto_(self):
        self._token('bondedto')
        self._atom_selection_()
        self.ast['bondedto'] = self.last_node

        self.ast._define(
            ['bondedto'],
            []
        )

    @graken()
    def _around_(self):
        self._atom_selection_()
        self.ast['around'] = self.last_node
        self._token('around')
        self._real_()
        self.ast['cutoff'] = self.last_node

        self.ast._define(
            ['around', 'cutoff'],
            []
        )

    @graken()
    def _saround_(self):
        self._atom_selection_()
        self.ast['saround'] = self.last_node
        self._token('saround')
        self._real_()
        self.ast['cutoff'] = self.last_node

        self.ast._define(
            ['saround', 'cutoff'],
            []
        )

    @graken()
    def _segid_(self):
        self._token('segid')
        with self._group():
            with self._choice():
                with self._option():
                    self._segid2_()
                with self._option():
                    self._SEGID3_()
                self._error('no available options')
        self.ast['segid'] = self.last_node

        self.ast._define(
            ['segid'],
            []
        )

    @graken()
    def _segid2_(self):
        with self._choice():
            with self._option():
                self._SEGID_()
            with self._option():
                self._WILDCARD_()
            self._error('no available options')

    @graken()
    def _SEGID3_(self):
        self._SEGID_()
        self._token(':')
        self._SEGID_()

    @graken()
    def _resid_(self):
        self._token('resid')
        with self._group():
            with self._choice():
                with self._option():
                    self._resid2_()
                with self._option():
                    self._RESID3_()
                self._error('no available options')
        self.ast['resid'] = self.last_node

        self.ast._define(
            ['resid'],
            []
        )

    @graken()
    def _resid2_(self):
        with self._choice():
            with self._option():
                self._RESID_()
            with self._option():
                self._WILDCARD_()
            self._error('no available options')

    @graken()
    def _RESID3_(self):
        self._RESID_()
        self._token(':')
        self._RESID_()

    @graken()
    def _resname_(self):
        self._token('resname')
        with self._group():
            with self._choice():
                with self._option():
                    self._resname2_()
                with self._option():
                    self._RESNAME3_()
                self._error('no available options')
        self.ast['resname'] = self.last_node

        self.ast._define(
            ['resname'],
            []
        )

    @graken()
    def _resname2_(self):
        with self._choice():
            with self._option():
                self._RESNAME_()
            with self._option():
                self._WILDCARD_()
            self._error('no available options')

    @graken()
    def _RESNAME3_(self):
        self._RESNAME_()
        self._token(':')
        self._RESNAME_()

    @graken()
    def _name_(self):
        self._token('name')
        with self._group():
            with self._choice():
                with self._option():
                    self._name2_()
                with self._option():
                    self._NAME3_()
                self._error('no available options')
        self.ast['name'] = self.last_node

        self.ast._define(
            ['name'],
            []
        )

    @graken()
    def _name2_(self):
        with self._choice():
            with self._option():
                self._TYPE_()
            with self._option():
                self._WILDCARD_()
            self._error('no available options')

    @graken()
    def _NAME3_(self):
        self._TYPE_()
        self._token(':')
        self._TYPE_()

    @graken()
    def _chemical_(self):
        self._token('chemical')
        with self._group():
            with self._choice():
                with self._option():
                    self._chemical2_()
                with self._option():
                    self._CHEMICAL3_()
                self._error('no available options')
        self.ast['chemical'] = self.last_node

        self.ast._define(
            ['chemical'],
            []
        )

    @graken()
    def _chemical2_(self):
        with self._choice():
            with self._option():
                self._TYPE_()
            with self._option():
                self._WILDCARD_()
            self._error('no available options')

    @graken()
    def _CHEMICAL3_(self):
        self._TYPE_()
        self._token(':')
        self._TYPE_()

    @graken()
    def _atom_(self):
        self._token('atom')
        self._segid2_()
        self.ast['atom_segid'] = self.last_node
        self._resid2_()
        self.ast['atom_resid'] = self.last_node
        self._name2_()
        self.ast['atom_name'] = self.last_node

        self.ast._define(
            ['atom_segid', 'atom_resid', 'atom_name'],
            []
        )

    @graken()
    def _attribute_(self):
        self._token('attribute')
        self._ATPROP_()
        self.ast['attribute_property'] = self.last_node
        self._attribute_operator_()
        self.ast['attribute_operator'] = self.last_node
        self._real_()
        self.ast['attribute_value'] = self.last_node

        self.ast._define(
            ['attribute_property', 'attribute_operator', 'attribute_value'],
            []
        )

    @graken()
    def _ATPROP_(self):
        with self._optional():
            self._token('abs')
        self._attribute_property_()

    @graken()
    def _fbox_(self):
        self._token('fbox')
        self._real_()
        self._real_()
        self._real_()
        self._real_()
        self._real_()
        self._real_()

    @graken()
    def _sfbox_(self):
        self._token('sfbox')
        self._real_()
        self._real_()
        self._real_()
        self._real_()
        self._real_()
        self._real_()

    @graken()
    def _point_(self):
        self._token('=')
        self._vector_()
        with self._optional():
            self._token('cut')
            self._real_()

    @graken()
    def _RECALL_STORE_(self):
        self._token('recall store')
        self._NUMBER_()

    @graken()
    def _known_(self):
        self._token('known')

    @graken()
    def _hydrogen_(self):
        with self._choice():
            with self._option():
                self._token('hydrogen')
            with self._option():
                self._token('hydro')
            self._error('expecting one of: hydro hydrogen')

    @graken()
    def _all__(self):
        self._token('all')

    @graken()
    def _previous_(self):
        with self._choice():
            with self._option():
                self._token('previous')
            with self._option():
                self._token('prev')
            self._error('expecting one of: prev previous')

    @graken()
    def _tag_(self):
        self._token('tag')

    @graken()
    def _none_(self):
        self._token('none')

    @graken()
    def _id_(self):
        self._token('id')
        self._INTEGER_()
        with self._optional():
            self._token(':')
            self._INTEGER_()

    @graken()
    def _attribute_property_(self):
        with self._choice():
            with self._option():
                self._token('x')
            with self._option():
                self._token('y')
            with self._option():
                self._token('z')
            with self._option():
                self._token('b')
            with self._option():
                self._token('q')
            with self._option():
                self._token('xcomp')
            with self._option():
                self._token('ycomp')
            with self._option():
                self._token('zcomp')
            with self._option():
                self._token('bcomp')
            with self._option():
                self._token('qcomp')
            with self._option():
                self._token('refx')
            with self._option():
                self._token('refy')
            with self._option():
                self._token('refz')
            with self._option():
                self._token('mass')
            with self._option():
                self._token('charge')
            with self._option():
                self._token('fbeta')
            with self._option():
                self._token('dx')
            with self._option():
                self._token('dy')
            with self._option():
                self._token('dz')
            with self._option():
                self._token('vx')
            with self._option():
                self._token('vy')
            with self._option():
                self._token('vz')
            with self._option():
                self._token('rmsd')
            with self._option():
                self._token('scatter_a1')
            with self._option():
                self._token('scatter_a2')
            with self._option():
                self._token('scatter_a3')
            with self._option():
                self._token('scatter_a4')
            with self._option():
                self._token('scatter_b1')
            with self._option():
                self._token('scatter_b2')
            with self._option():
                self._token('scatter_b3')
            with self._option():
                self._token('scatter_b4')
            with self._option():
                self._token('scatter_c')
            with self._option():
                self._token('scatter_fp')
            with self._option():
                self._token('scatter_fdp')
            self._error('expecting one of: b bcomp charge dx dy dz fbeta mass q qcomp refx refy refz rmsd scatter_a1 scatter_a2 scatter_a3 scatter_a4 scatter_b1 scatter_b2 scatter_b3 scatter_b4 scatter_c scatter_fdp scatter_fp vx vy vz x xcomp y ycomp z zcomp')

    @graken()
    def _attribute_operator_(self):
        with self._choice():
            with self._option():
                self._token('=')
            with self._option():
                self._token('>')
            with self._option():
                self._token('<')
            with self._option():
                self._token('#')
            self._error('expecting one of: # < = >')

    @graken()
    def _assign_statements_(self):

        def block0():
            self._assign_statement_()
        self._closure(block0)

    @graken()
    def _assign_statement_(self):
        with self._choice():
            with self._option():
                self._assign_statement_2_()
            with self._option():
                self._assign_statement_2_cross_()
            with self._option():
                self._assign_statement_4_()
            with self._option():
                self._assign_statement_4_cross_()
            with self._option():
                self._assign_statement_6_()
            with self._option():
                self._assign_statement_6_cross_()
            with self._option():
                self._assign_statement_pcs_()
            with self._option():
                self._assign_statement_pcs_cross_()
            with self._option():
                self._assign_statement_positional_()
            self._error('no available options')

    @graken()
    def _assign_(self):
        with self._choice():
            with self._option():
                self._token('assign')
            with self._option():
                self._token('assi')
            self._error('expecting one of: assi assign')

    @graken()
    def _assign_statement_2_(self):
        self._assign_()
        with self._group():
            self._atom_selection_()
            self._atom_selection_()
        self.ast['assign'] = self.last_node
        self._real_()
        self.ast['distance'] = self.last_node
        self._real_()
        self.ast['dminus'] = self.last_node
        self._real_()
        self.ast['dplus'] = self.last_node

        self.ast._define(
            ['assign', 'distance', 'dminus', 'dplus'],
            []
        )

    @graken()
    def _assign_statement_2_cross_(self):
        self._assign_statement_2_()
        self._token('or')
        with self._group():
            self._atom_selection_()
            self._atom_selection_()
        self.ast['cross_assign'] = self.last_node

        self.ast._define(
            ['cross_assign'],
            []
        )

    @graken()
    def _assign_statement_4_(self):
        self._assign_()
        with self._group():
            self._atom_selection_()
            self._atom_selection_()
            self._atom_selection_()
            self._atom_selection_()
        self.ast['assign'] = self.last_node
        self._real_()
        self._real_()
        self._real_()
        self._NUMBER_()

        self.ast._define(
            ['assign'],
            []
        )

    @graken()
    def _assign_statement_4_cross_(self):
        self._assign_statement_4_()
        self._token('or')
        with self._group():
            self._atom_selection_()
            self._atom_selection_()
            self._atom_selection_()
            self._atom_selection_()
        self.ast['cross_assign'] = self.last_node

        self.ast._define(
            ['cross_assign'],
            []
        )

    @graken()
    def _assign_statement_6_(self):
        self._assign_()
        with self._group():
            self._atom_selection_()
            self._atom_selection_()
            self._atom_selection_()
            self._atom_selection_()
        self.ast['assign'] = self.last_node
        self._real_()
        self._real_()

        self.ast._define(
            ['assign'],
            []
        )

    @graken()
    def _assign_statement_6_cross_(self):
        self._assign_statement_6_()
        self._token('or')
        with self._group():
            self._atom_selection_()
            self._atom_selection_()
            self._atom_selection_()
            self._atom_selection_()
            self._atom_selection_()
            self._atom_selection_()
        self.ast['cross_assign'] = self.last_node

        self.ast._define(
            ['cross_assign'],
            []
        )

    @graken()
    def _assign_statement_pcs_(self):
        self._assign_()
        with self._group():
            self._atom_selection_()
            self._atom_selection_()
            self._atom_selection_()
            self._atom_selection_()
        self.ast['assign'] = self.last_node
        self._real_()
        self._real_()

        self.ast._define(
            ['assign'],
            []
        )

    @graken()
    def _assign_statement_pcs_cross_(self):
        self._assign_statement_pcs_()
        self._token('or')
        with self._group():
            self._atom_selection_()
            self._atom_selection_()
            self._atom_selection_()
            self._atom_selection_()
            self._atom_selection_()
        self.ast['cross_assign'] = self.last_node

        self.ast._define(
            ['cross_assign'],
            []
        )

    @graken()
    def _assign_statement_positional_(self):
        self._assign_()
        self._atom_selection_()
        self.ast['assign'] = self.last_node
        self._real_()
        self.ast['distance'] = self.last_node
        self._real_()
        self.ast['dminus'] = self.last_node
        self._real_()
        self.ast['dplus'] = self.last_node
        self._XYZ_()
        self.ast['type'] = self.last_node
        self._vector_()
        self.ast['xyz'] = self.last_node

        self.ast._define(
            ['assign', 'distance', 'dminus', 'dplus', 'type', 'xyz'],
            []
        )


class tbl_grammarSemantics(object):
    def NUMBER(self, ast):
        return ast

    def INTEGER(self, ast):
        return ast

    def float(self, ast):
        return ast

    def expfloat(self, ast):
        return ast

    def real(self, ast):
        return ast

    def SEGID(self, ast):
        return ast

    def RESID(self, ast):
        return ast

    def RESNAME(self, ast):
        return ast

    def TYPE(self, ast):
        return ast

    def WILDCARD(self, ast):
        return ast

    def XYZ(self, ast):
        return ast

    def vector(self, ast):
        return ast

    def atom_selection(self, ast):
        return ast

    def atom_selection2(self, ast):
        return ast

    def term(self, ast):
        return ast

    def term2(self, ast):
        return ast

    def factor(self, ast):
        return ast

    def factor0(self, ast):
        return ast

    def not_(self, ast):
        return ast

    def byres(self, ast):
        return ast

    def bygroup(self, ast):
        return ast

    def bondedto(self, ast):
        return ast

    def around(self, ast):
        return ast

    def saround(self, ast):
        return ast

    def segid(self, ast):
        return ast

    def segid2(self, ast):
        return ast

    def SEGID3(self, ast):
        return ast

    def resid(self, ast):
        return ast

    def resid2(self, ast):
        return ast

    def RESID3(self, ast):
        return ast

    def resname(self, ast):
        return ast

    def resname2(self, ast):
        return ast

    def RESNAME3(self, ast):
        return ast

    def name(self, ast):
        return ast

    def name2(self, ast):
        return ast

    def NAME3(self, ast):
        return ast

    def chemical(self, ast):
        return ast

    def chemical2(self, ast):
        return ast

    def CHEMICAL3(self, ast):
        return ast

    def atom(self, ast):
        return ast

    def attribute(self, ast):
        return ast

    def ATPROP(self, ast):
        return ast

    def fbox(self, ast):
        return ast

    def sfbox(self, ast):
        return ast

    def point(self, ast):
        return ast

    def RECALL_STORE(self, ast):
        return ast

    def known(self, ast):
        return ast

    def hydrogen(self, ast):
        return ast

    def all_(self, ast):
        return ast

    def previous(self, ast):
        return ast

    def tag(self, ast):
        return ast

    def none(self, ast):
        return ast

    def id(self, ast):
        return ast

    def attribute_property(self, ast):
        return ast

    def attribute_operator(self, ast):
        return ast

    def assign_statements(self, ast):
        return ast

    def assign_statement(self, ast):
        return ast

    def assign(self, ast):
        return ast

    def assign_statement_2(self, ast):
        return ast

    def assign_statement_2_cross(self, ast):
        return ast

    def assign_statement_4(self, ast):
        return ast

    def assign_statement_4_cross(self, ast):
        return ast

    def assign_statement_6(self, ast):
        return ast

    def assign_statement_6_cross(self, ast):
        return ast

    def assign_statement_pcs(self, ast):
        return ast

    def assign_statement_pcs_cross(self, ast):
        return ast

    def assign_statement_positional(self, ast):
        return ast


def main(filename, startrule, trace=False, whitespace=None, nameguard=None):
    import json
    with open(filename) as f:
        text = f.read()
    parser = tbl_grammarParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace,
        nameguard=nameguard)
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()

if __name__ == '__main__':
    import argparse
    import string
    import sys

    class ListRules(argparse.Action):
        def __call__(self, parser, namespace, values, option_string):
            print('Rules:')
            for r in tbl_grammarParser.rule_list():
                print(r)
            print()
            sys.exit(0)

    parser = argparse.ArgumentParser(description="Simple parser for tbl_grammar.")
    parser.add_argument('-l', '--list', action=ListRules, nargs=0,
                        help="list all rules and exit")
    parser.add_argument('-n', '--no-nameguard', action='store_true',
                        dest='no_nameguard',
                        help="disable the 'nameguard' feature")
    parser.add_argument('-t', '--trace', action='store_true',
                        help="output trace information")
    parser.add_argument('-w', '--whitespace', type=str, default=string.whitespace,
                        help="whitespace specification")
    parser.add_argument('file', metavar="FILE", help="the input file to parse")
    parser.add_argument('startrule', metavar="STARTRULE",
                        help="the start rule for parsing")
    args = parser.parse_args()

    main(
        args.file,
        args.startrule,
        trace=args.trace,
        whitespace=args.whitespace,
        nameguard=not args.no_nameguard
    )

