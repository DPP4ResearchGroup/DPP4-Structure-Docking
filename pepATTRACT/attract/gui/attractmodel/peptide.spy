Type AttractPeptideProteinPartner {
  ## form pdbfile.type = "file"
  ## form pdbfile.name = "Structure file"
  ResourceData_PDB pdbfile
  Bool has_hydrogens = False
  ## form has_hydrogens.name = "The PDB file contains all necessary atoms, including polar hydrogens"
    
  *HaddockRestraintsInterface haddock_restraints
  ## form haddock_restraints.name = "Definition of residues for HADDOCK-type distance restraints (optional)"
  form {
    #peptide will be passive, so disable passive residues on the protein
    haddock_restraints.auto_passive.type = None 
    haddock_restraints.passivereslist.type = None
  }  

  Integer ensemble_size = 0
  ## form ensemble_size.name = "If the PDB is a multi-model ensemble, specify the number of conformers"
  ## validate if ensemble_size != 0: assert ensemble_size >= 1
        
  form {
    use_rmsd.name = "Perform RMSD analysis"
  }

  Bool use_rmsd = False
  *ResourceData_PDB rmsd_pdb
  ## form rmsd_pdb.add_header("You can specify a PDB file to use as reference in RMSD calculations")
  ## form rmsd_pdb.name = "RMSD PDB file"
  ## form rmsd_pdb.type = "file"
  validate {  
    if not use_rmsd:
      assert rmsd_pdb is None
    else:
      assert rmsd_pdb is not None
  }
  error {
    'if ensemble_size != 0: assert ensemble_size >= 1'
    =>
    'If you define an ensemble size, it must at least 1, not {ensemble_size}'

    'assert rmsd_pdb is None'
    =>
    'You defined a PDB for RMSD calculation, which you disabled'

    'assert rmsd_pdb is not None'
    =>
    'You need to define a PDB for RMSD calculation, or disable it'

  } 
}


Type AttractPeptidePartner:Degenerate {
  String sequence
  ## form sequence.name = "Peptide sequence"
  
  form {
    use_rmsd.name = "Perform RMSD analysis"
  }
  
  Bool use_rmsd = False
  *ResourceData_PDB rmsd_pdb
  ## form rmsd_pdb.add_header("You can specify a PDB file to use as reference in RMSD calculations")
  ## form rmsd_pdb.name = "RMSD PDB file"
  ## form rmsd_pdb.type = "file"
  validate {  
    for c in sequence:
      if c not in "ACDEFGHIKLMNPQRSTVWY":
        raise spyder.core.ValidationError("Please provide a peptide sequence in single letter code")
    if not use_rmsd:
      assert rmsd_pdb is None
    else:
      assert rmsd_pdb is not None
  }
  error {

    'assert rmsd_pdb is None'
    =>
    'You defined a PDB for RMSD calculation, which you disabled'

    'assert rmsd_pdb is not None'
    =>
    'You need to define a PDB for RMSD calculation, or disable it'

  } 
  }

Type AttractPeptideModel {
  String runname = "attract-pep"
  form {
    runname.add_header("Please supply a name for your docking run (one word)")
    runname.name = "Name of the docking run"
  }    
  AttractPeptideProteinPartner p1
  form {
    p1.name = "Protein"
  }
  AttractPeptidePartner p2
  form{
    p2.name = "Peptide"
  }

  #***Energy and interaction parameters***
  Bool use_grids = True
  ## form use_grids.name = "Perform grid-accelerated docking"
  Bool use_iattract = True
  ## form use_iattract.name = "Perform iATTRACT refinement after the docking"
  Enum completion_tool("whatif", "pdb2pqr_whatif", "amber", "cns") = "pdb2pqr_whatif"
  form {
    completion_tool.add_header("External tool for PDB completion and hydrogens")
    completion_tool.add_header("NOTE: PDB2PQR, AMBER and CNS require a local installation")
    completion_tool.add_header("NOTE: PDB2PQR only completes proteins; WHATIF is used for nucleic acids")  
    completion_tool.name = "PDB completion method"
    completion_tool.optiontitles = (
      "WHATIF web server",
      "PDB2PQR",
      "AMBER",
      "CNS",
    )
  }  
  form {
    _g = "Energy and interaction parameters"
    use_grids.group = _g
    use_iattract.group = _g
    completion_tool.group = _g
  }

  
  #***Analysis***  
  Bool calc_lrmsd = False  
  Bool calc_irmsd = False
  Bool calc_fnat = False
  Integer nr_collect = 50
  form {

    calc_lrmsd.group = "Analysis"
    calc_irmsd.group = "Analysis"
    calc_fnat.group = "Analysis"
    nr_collect.group = "Analysis"
    
    calc_lrmsd.name = "Calculate ligand RMSD after docking"
    calc_irmsd.name = "Calculate interface RMSD after docking"
    calc_fnat.name = "Calculate fraction of native contacts after docking"

    nr_collect.name = "Number of structures to collect as PDB file"
  }
  #***
    
  #***Computing and parallelization parameters***
  Integer np = 1
  ## form np.group = "Computing and parallelization parameters"
  ## form np.name = "Number of processor cores"
  
  
  #***
  validate {
    assert nr_collect > 0
    assert np > 0
    
    assert p1.use_rmsd == p2.use_rmsd
    if p1.use_rmsd :
      assert calc_lrmsd or calc_irmsd or calc_fnat
    else:
      assert not calc_lrmsd
      assert not calc_irmsd
      assert not calc_fnat
  }
  error {
    'assert not calc_irmsd'
    =>
    'You are trying to calculate IRMSD but did not enable RMSD calculation in the partners section. Please upload PDB files for RMSD calculation for both partners.'

    'assert calc_lrmsd or calc_irmsd or calc_fnat'
    =>
    'You specified PDBs for RMSD calculations but you are calculating neither ligand RMSD nor interface RMSD nor fraction of native contacts. Please specify one of these in the Analysis section or disable RMSD calculation.'

    'assert nr_collect > 0'
    =>
    'Please specify a number of structures you want to collect as a PDB file from the docking results. It is not permitted to set this number to zero.'

    'assert not calc_fnat'
    =>
    'You are trying to calculate fnat but did not enable RMSD calculation in the partners section. Please upload PDB files for RMSD calculation for both partners.'

    'assert p1.use_rmsd == p2.use_rmsd'
    =>
    'Please enable RMSD calculation for both partners or for neither one'

    'assert not calc_lrmsd'
    =>
    'You are trying to calculate ligand RMSD but did not enable RMSD calculation in the partners section. Please upload PDB files for RMSD calculation for both partners.'

    'assert np > 0'
    =>
    'Please use at least one core (np=1)for running the docking.'

    'if completion_tool is not None: assert completion_tool in ("whatif", "pdb2pqr_whatif", "amber", "cns")'
    =>
    ''
  
  }
  
}
  
Define AttractEasyModel(AttractPeptideModel) peptide2model
